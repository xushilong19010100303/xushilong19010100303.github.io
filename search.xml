<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue</title>
      <link href="/2022/082624839.html"/>
      <url>/2022/082624839.html</url>
      
        <content type="html"><![CDATA[<h2 id="启动一个vue项目"><a href="#启动一个vue项目" class="headerlink" title="启动一个vue项目"></a>启动一个vue项目</h2><h3 id="vue2-0"><a href="#vue2-0" class="headerlink" title="vue2.0"></a>vue2.0</h3><p> D:\nodeJS\node_global\node_modules\vue 输入cmd<br> npm nodeJs已经安装好了 </p><pre class=" language-java"><code class="language-java">npm init vue<span class="token annotation punctuation">@latest</span><span class="token function">cd</span> <span class="token punctuation">(</span>项目名<span class="token punctuation">)</span> npm install npm run dev</code></pre><hr><h3 id="vue3-0"><a href="#vue3-0" class="headerlink" title="vue3.0"></a>vue3.0</h3><p>同上目录下面 </p><pre class=" language-java"><code class="language-java">vue create xsl666<span class="token function">cd</span> <span class="token punctuation">(</span>项目名<span class="token punctuation">)</span>  npm run serve</code></pre><hr><hr><h2 id="vue2-0-1"><a href="#vue2-0-1" class="headerlink" title="vue2.0"></a>vue2.0</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{name}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el <span class="token punctuation">:</span> <span class="token string">"#app"</span>         <span class="token comment" spellcheck="true">//挂载  </span>    data：<span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//必须有data(){return xx}      </span>        name<span class="token punctuation">:</span><span class="token string">'徐世龙'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><hr><blockquote><ul><li>.类 #id “div”标签选择器等都可以挂载 不可以挂body html 单标签</li><li>data里可以任意数据，对象数组都可以</li></ul></blockquote><h4 id="v-？"><a href="#v-？" class="headerlink" title="v-？"></a>v-？</h4><blockquote><p>v-text  修改textContent属性</p></blockquote><pre class=" language-html"><code class="language-html">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &lt;h2 v-text = "name"+"!">abc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      // abc被全部替换    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>名字是{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>               //推荐这样写  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    </code></pre><blockquote><p>v-html  设置innerHTML属性</p></blockquote><pre class=" language-html"><code class="language-html">    &lt;p v-html = "name"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>       //显示的是a标签的样式，如果是v-text直接显示原来的内容不会解析    data:{ name : "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>xxx.com<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>徐世龙<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>"}</code></pre><blockquote><p>v-on   为元素绑定事件 简写@<br>事件修饰符@keyup.enter  可传参</p></blockquote><pre class=" language-html"><code class="language-html">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xsl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>         //也可以input框设个button             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">     data<span class="token punctuation">:</span><span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'张烁'</span><span class="token punctuation">}</span>     methods<span class="token punctuation">:</span><span class="token punctuation">{</span> <span class="token function">xsl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'cnm'</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//方法内部可以通过this访问data的数据</span>     </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>                                   </code></pre><blockquote><p>v-show  根据真假让元素显示/隐藏 <code>display:none</code></p></blockquote><pre class=" language-html"><code class="language-html">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xsl<span class="token punctuation">></span>18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">     data<span class="token punctuation">:</span><span class="token punctuation">{</span>xsl<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span>     </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><blockquote><p>v-if    操作DOM树 不适合频繁操作的元素，性能消耗大</p></blockquote><blockquote><p>v-bind  绑定元素的属性 src class title等 省略为：</p></blockquote><pre class=" language-html"><code class="language-html">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xsl<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{a:isAc}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   //相当于三元表达式isAc？a : ""     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">     data<span class="token punctuation">:</span><span class="token punctuation">{</span>xsl<span class="token punctuation">:</span><span class="token string">'/abc.jpg'</span> <span class="token punctuation">,</span> isAc<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">}</span>     </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><blockquote><p>v-for   生成列表结构</p></blockquote><pre class=" language-html"><code class="language-html">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>&lt;li v-for = "(a,b) in arr">{{a}}{{b}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">     data<span class="token punctuation">:</span><span class="token punctuation">{</span>arr<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'xsl'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'^'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//a输出内容。b输出索引</span>     </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>不要和v-if联用 因为for优先级高 可以把v-if放在ul或者内部，要不报错。</p><blockquote><p>v-model  双向绑定表单元素的值</p></blockquote><pre class=" language-html"><code class="language-html">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xsl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">     data<span class="token punctuation">:</span><span class="token punctuation">{</span>xsl<span class="token punctuation">:</span><span class="token number">666</span><span class="token punctuation">}</span>                      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><hr><h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><h4 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get请求<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post请求<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;script src = "https://unpkg.com/axios/dist/axios.min.js"><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// axios.get().then(function(response){},function(err){})</span>    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".get"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"https://autumnfish.cn/api/joke/list?num=3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>        <span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".post"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"https://autumnfish.cn/api/user/reg"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>username<span class="token punctuation">:</span><span class="token string">"jack"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>         <span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token punctuation">)</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><blockquote><p>都是固定写法 背下来吧<br>axios的this指向改变的问题，先把this存起来(var a = this) 回调函数中使用a</p></blockquote><hr><h4 id="computed计算属性"><a href="#computed计算属性" class="headerlink" title="computed计算属性"></a>computed计算属性</h4><ul><li>与data methods同级</li><li>最大的特点是缓存，仅当computed内的函数 依赖的变量变化 才会再次运行该函数</li><li>本质上其实是get,v-model改变表单会报错</li></ul><hr><h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><pre class=" language-javascript"><code class="language-javascript">    watch<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token function">name</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token punctuation">,</span> old<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//监听属性</span>        obj<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">,</span>old<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//监听对象</span>        deep<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span></code></pre><hr><hr><h2 id="vue3-0-1"><a href="#vue3-0-1" class="headerlink" title="vue3.0"></a>vue3.0</h2><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><ul><li>Alpha     内测      </li><li>Beta      公开测试  (依然会新增功能，有很多bug)</li><li>Rc        候选版本 （主要修bug）</li><li>Release   正式版本</li></ul><hr><h3 id="vue3-0新特性"><a href="#vue3-0新特性" class="headerlink" title="vue3.0新特性"></a>vue3.0新特性</h3><ul><li>ES6 proxy代替ES5 Object.defineProxy 重新实现数据响应</li><li>源码用typescript重写</li><li>提供了composition API</li><li>自定义渲染器 （可以开发App 小程序 游戏开发 Web）</li><li>Fragment 模板可以有多个元素</li></ul><h4 id="数据响应式对比"><a href="#数据响应式对比" class="headerlink" title="数据响应式对比"></a>数据响应式对比</h4><p>vue2.0 </p><ul><li>无法动态监测到对象属性的添加删除</li><li>无法监测到数组下标和length属性变更<br>解释：vue2.0做一个数据劫持，一旦数据变化，更新DOM</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> data<span class="token punctuation">{</span>    age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>   Object<span class="token punctuation">.</span><span class="token function">defineProxy</span><span class="token punctuation">(</span>data <span class="token punctuation">,</span> k <span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> a <span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>          a <span class="token operator">=</span> value<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span></code></pre><p>想添加需要$set(对象，属性，值) $delete(对象，属性)  arr.push();<br>vue3.0不支持IE11；</p><h3 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h3><p>对标webpack<br>是一个web开发构建工具，仅支持vue3.0</p><pre class=" language-javascript"><code class="language-javascript">    npm init vite<span class="token operator">-</span>app xsl666    cd xsl666    npm install    npm run dev</code></pre><hr><h3 id="composition-API"><a href="#composition-API" class="headerlink" title="composition API"></a>composition API</h3><p>vue2.0是options API vue3.0保留了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>力扣Day1</title>
      <link href="/2022/08257096.html"/>
      <url>/2022/08257096.html</url>
      
        <content type="html"><![CDATA[<h3 id="HJ1两数之和"><a href="#HJ1两数之和" class="headerlink" title="HJ1两数之和"></a>HJ1两数之和</h3><ul><li>Arrays.sort(数组)                  实现排序</li><li>Arrays.binarySearch(arr,num)       实现二分查找</li><li>arr.length                         数组的长度，注意没有括号</li><li>Integer.MIN_VALUE                  $-2^31$</li><li>(int) a != a                       数值过大时long转int丢失精度</li><li>Integer.toString(int i)            数字转字符串</li></ul><hr><h3 id="HJ2-两数相加"><a href="#HJ2-两数相加" class="headerlink" title="HJ2 两数相加"></a>HJ2 两数相加</h3><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><p>可以有头指针，每个节点包含data和next;<br>各节点不一定连续存放（当前data的next指向很远的另一个地址）</p><h4 id="去你妈的这个类要自己手写"><a href="#去你妈的这个类要自己手写" class="headerlink" title="去你妈的这个类要自己手写"></a>去你妈的这个类要自己手写</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    ListNode next<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//链表指向的下一个值的指针</span>    <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>val <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//构造方法，用于初始化，没有这个就不能实例化，决定了实例化的格式(int x)</span><span class="token punctuation">}</span>                                  <span class="token comment" spellcheck="true">//只要调用了该类，那么val就被赋值为x;</span></code></pre><hr><p><strong>用的时候</strong></p><pre class=" language-java"><code class="language-java">ListNode xx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//实例化，无需定义长度。取决于上面的构造方法</span>xx<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//赋值，即</span>xx<span class="token punctuation">.</span>val                          <span class="token comment" spellcheck="true">//取第一个值</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>华为机试笔记Day4</title>
      <link href="/2022/082322351.html"/>
      <url>/2022/082322351.html</url>
      
        <content type="html"><![CDATA[<h3 id="哈希（散列）"><a href="#哈希（散列）" class="headerlink" title="哈希（散列）"></a>哈希（散列）</h3><h4 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h4><p>按照输入数据返回一个整数，这个整数必须是唯一的。<strong>不一定是索引</strong><br>实现数据和存储位置的一一对应。<br>例如 ：<br>对一个数据进行一些操作，返回一个数(存储位置)就行。可能会出现冲突。</p><hr><h4 id="设计散列函数"><a href="#设计散列函数" class="headerlink" title="设计散列函数"></a>设计散列函数</h4><h5 id="直接定址"><a href="#直接定址" class="headerlink" title="直接定址"></a>直接定址</h5><blockquote><p>哈希表中存放该数据出现了几次，映射到对应的人之类这样的。<br><strong>问题</strong> ： 如果数据是电话号码之类的不方便，下标太大了。</p></blockquote><hr><h5 id="平方取中"><a href="#平方取中" class="headerlink" title="平方取中"></a>平方取中</h5><blockquote><p>把输入数据平方，取中间的某几位数。<br><strong>问题</strong> ：可能会出现冲突</p></blockquote><hr><h5 id="取余"><a href="#取余" class="headerlink" title="取余"></a>取余</h5><p>顾名思义<br><strong>问题</strong> ： 同上</p><hr><h4 id="冲突排除"><a href="#冲突排除" class="headerlink" title="冲突排除"></a>冲突排除</h4><h5 id="开放地址"><a href="#开放地址" class="headerlink" title="开放地址"></a>开放地址</h5><blockquote><ul><li>线性探测 ：直接放后面那个</li><li>二次探测 ：放后面第1、4、9、16个</li><li>再哈希 ：使用多个散列函数</li></ul></blockquote><h5 id="链地址"><a href="#链地址" class="headerlink" title="链地址"></a>链地址</h5><blockquote><p>采用链表思想，不直接放在地址，放在指向这个地址的一个地方。<br>重复的话就接着向后链。</p></blockquote><hr><h4 id="HJ8-合并表记录"><a href="#HJ8-合并表记录" class="headerlink" title="HJ8 合并表记录"></a>HJ8 合并表记录</h4><h5 id="原思路"><a href="#原思路" class="headerlink" title="原思路"></a>原思路</h5><p>nextInt循环读取两个数组 冒泡排序两数组，整理为顺序；比较当前index与前面index<br>相同则value更新，否则输出前一个，循环结束输出最后一个。</p><h5 id="map函数常用语法"><a href="#map函数常用语法" class="headerlink" title="map函数常用语法"></a>map函数常用语法</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span>HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> A <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//固定写法,可以是String Bolean等</span>     A<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     A<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"qwe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     A<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">"李海波"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     A<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Integer i <span class="token operator">:</span> A<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//输出key以及查询的value;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key: "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" value: "</span> <span class="token operator">+</span> A<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span>String value<span class="token operator">:</span> A<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 输出每一个value</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h5 id="新解决思路"><a href="#新解决思路" class="headerlink" title="新解决思路"></a>新解决思路</h5><pre class=" language-java"><code class="language-java">      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tableSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">int</span> key <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> value <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> table<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span></code></pre><hr><h4 id="HJ9提取不重复的数"><a href="#HJ9提取不重复的数" class="headerlink" title="HJ9提取不重复的数"></a>HJ9提取不重复的数</h4><blockquote><p>思路和上一题差不多。主要是注意Put 不是 set ，然后value一般是自己定义往里填的<br>后来的会覆盖前面的，keySet values两个循环输出方法。</p></blockquote><pre class=" language-java"><code class="language-java">          <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//利用HashSet的不重复性！！！！！</span></code></pre><hr><h4 id="HJ10字符个数统计"><a href="#HJ10字符个数统计" class="headerlink" title="HJ10字符个数统计"></a>HJ10字符个数统计</h4><blockquote><p>妈的 记住br.read调用一次就会读取一次，不可以作为循环或判断条件。</p></blockquote><h5 id="HashSet类"><a href="#HashSet类" class="headerlink" title="HashSet类"></a>HashSet类</h5><pre class=" language-java"><code class="language-java">    <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引入 HashSet 类</span>    HashSet<span class="token operator">&lt;</span>String<span class="token operator">></span> A <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    A<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    A<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重复元素不添加；</span>    A<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"bcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>    A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    A<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String i <span class="token operator">:</span> A<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>                              <span class="token comment" spellcheck="true">//迭代输出</span></code></pre><h3 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h3><p><strong>常见的速查</strong></p><table><thead><tr><th align="center">字符</th><th align="center">ASCII码</th></tr></thead><tbody><tr><td align="center">空字符</td><td align="center">0</td></tr><tr><td align="center">换行</td><td align="center">10</td></tr><tr><td align="center">回车</td><td align="center">13</td></tr><tr><td align="center">空格</td><td align="center">32</td></tr><tr><td align="center">0-9</td><td align="center">48-57</td></tr><tr><td align="center">A-Z</td><td align="center">65-90</td></tr><tr><td align="center">a-z</td><td align="center">97-122</td></tr><tr><td align="center">其他</td><td align="center">其余到127</td></tr><tr><td align="center"><a href="https://xinzhi.wenda.so.com/a/1524302199615149">更多</a></td><td align="center"></td></tr></tbody></table><hr><h3 id="HJ11-数字颠倒"><a href="#HJ11-数字颠倒" class="headerlink" title="HJ11 数字颠倒"></a>HJ11 数字颠倒</h3><p>do-while循环</p><pre class=" language-java"><code class="language-java">   <span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">do</span><span class="token punctuation">{</span>    i<span class="token operator">++</span>   <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意while后面加分号，循环体在do后面。</span></code></pre><hr><h3 id="String类的方法"><a href="#String类的方法" class="headerlink" title="String类的方法"></a>String类的方法</h3><h4 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h4><blockquote><p>String(字符串)<br>他有很多方法，方法都是有括号的，需要先实例化String s = <strong>“abCD!&amp;?123”</strong><br>常见方法</p></blockquote><pre class=" language-java"><code class="language-java">String s <span class="token operator">=</span> <span class="token string">"abCD!&amp;?123"</span><span class="token number">1</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">//返回&amp; </span><span class="token number">2</span> s<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//返回8,因为比abc长8位，否则返回首位ASCII差,可IgnoreCase!</span><span class="token number">3</span> s<span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token string">"QWE"</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//拼接到后面 </span><span class="token number">4</span> s<span class="token punctuation">.</span><span class="token function">contentEquals</span><span class="token punctuation">(</span><span class="token string">"abC"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//返回true 括号里必须是Stringbuffer类</span><span class="token number">5</span> s<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//返回true </span><span class="token number">6</span> s<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">//返回哈希码(ASCII，</span><span class="token number">7</span> s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//第6个位置向后'1'的索引7，也可用ASCII值，还可"123"，还可lastIndexOf</span><span class="token number">8</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">//返回10 </span><span class="token number">9</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//a替换为A </span>                           <span class="token comment" spellcheck="true">//replaceAll(正则，"newstr") replaceFirst</span><span class="token number">10</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//返回的是String[]!!!!! 份数是limit 不够就不处理。</span><span class="token number">11</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//返回"bCD"</span><span class="token number">12</span> s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// 转小写，toUpperCase</span><span class="token number">13</span> s<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">'1'</span>，<span class="token string">'s'</span>，<span class="token string">'!'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回1s! 即任意类型转字符串表达形式</span><span class="token number">14</span> s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">//false</span></code></pre><p>附：<br>hashCode方法 $\sum\limits_{i=0}^{n-1}s[i]*31^i$</p><h4 id="equals-与-x3D-x3D"><a href="#equals-与-x3D-x3D" class="headerlink" title="equals 与 =="></a>equals 与 ==</h4><pre class=" language-java"><code class="language-java">String s1 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// String 直接创建</span>String s2 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// String 直接创建</span>String s3 <span class="token operator">=</span> s1<span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 相同引用</span>String s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// String 对象创建</span>String s5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// String 对象创建</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// true, s1 和 s2 都是直接创建</span>s2 <span class="token operator">==</span> s3<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// true </span>s1 <span class="token operator">==</span> s4<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// false, 不同引用地址</span>s4 <span class="token operator">==</span> s5<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// false, 堆中不同引用地址</span> s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true, 相同内容</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true, 相同内容</span>s4<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true, 相同内容</span></code></pre><p>equals也有IgnoreCase</p><hr><h4 id="HJ1-字符串最后一个单词的长度"><a href="#HJ1-字符串最后一个单词的长度" class="headerlink" title="HJ1 字符串最后一个单词的长度"></a>HJ1 字符串最后一个单词的长度</h4><pre class=" language-java"><code class="language-java">    String str <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> length <span class="token operator">=</span> s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//s[0]是hello </span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>主要学习的是String[]是个数组类型，划分后不是按char索引，而是按单词索引</p><hr><h4 id="HJ12-字符串倒转"><a href="#HJ12-字符串倒转" class="headerlink" title="HJ12 字符串倒转"></a>HJ12 字符串倒转</h4><p>侮辱智商。。。直接逆序循环解决了。</p><h4 id="HJ13-句子倒序输出"><a href="#HJ13-句子倒序输出" class="headerlink" title="HJ13 句子倒序输出"></a>HJ13 句子倒序输出</h4><p>也是侮辱智商的。。。</p><h3 id="明天预备学习的内容"><a href="#明天预备学习的内容" class="headerlink" title="明天预备学习的内容"></a>明天预备学习的内容</h3><ul><li>正则表达式</li><li>Arrays类</li><li>刷到HJ25</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>华为机试Day3</title>
      <link href="/2022/082136129.html"/>
      <url>/2022/082136129.html</url>
      
        <content type="html"><![CDATA[<h3 id="输入的另一种方式"><a href="#输入的另一种方式" class="headerlink" title="输入的另一种方式"></a>输入的另一种方式</h3><p><strong>利用IO流</strong> 一般牛客上面都给写好了</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// import java.io.BufferedReader;</span><span class="token comment" spellcheck="true">// import java.io.IOException;</span><span class="token comment" spellcheck="true">// import java.io.InputStreamReader;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//读取的总是字符串</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//字符串转数字</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>笔试遇到的问题合集</title>
      <link href="/2022/082029846.html"/>
      <url>/2022/082029846.html</url>
      
        <content type="html"><![CDATA[<h2 id="Thouthworks"><a href="#Thouthworks" class="headerlink" title="Thouthworks"></a>Thouthworks</h2><p>三道就做出来俩，虽然挺简单的但是考的List Integer类型我不会哈哈哈</p><h3 id="一、算法复杂度问题"><a href="#一、算法复杂度问题" class="headerlink" title="一、算法复杂度问题"></a>一、算法复杂度问题</h3><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><p>O($N!$) &gt; O($2^N$) &gt; O($N^2$) &gt; O($N*logN$) &gt; O($N$) &gt; O($logN$) &gt; O($1$)</p><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><h5 id="O-N"><a href="#O-N" class="headerlink" title="O($N$)"></a>O($N$)</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span>；i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>执行一次 i = 1 和 N 次 </p><ul><li>i&lt;n </li><li>i++</li><li>x++<br>共 <strong>3N+1</strong> 次<br><strong>N无限大时 O(3N+1)； 更接近O(N)</strong></li></ul><hr><h5 id="O-N-2"><a href="#O-N-2" class="headerlink" title="O($N^2$)"></a>O($N^2$)</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span>；i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span>；i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>共 <strong>$n^2+n$</strong> 次<br>O($N^2+N$) ==&gt; O($N^2$) </p><hr><h5 id="O-1"><a href="#O-1" class="headerlink" title="O(1)"></a>O(1)</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> z <span class="token operator">=</span> x<span class="token punctuation">;</span>x <span class="token operator">=</span> y<span class="token punctuation">;</span>y <span class="token operator">=</span> z<span class="token punctuation">;</span></code></pre><p>无论$x,y$怎么变化，复杂度都不变。</p><hr><h5 id="O-logN"><a href="#O-logN" class="headerlink" title="O($logN$)"></a>O($logN$)</h5><pre class=" language-java"><code class="language-java"> <span class="token keyword">int</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    i <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>循环$k = \log_2 N$次 停止循环。</p><hr><h5 id="O-n-logN"><a href="#O-n-logN" class="headerlink" title="O($n*logN$)"></a>O($n*logN$)</h5><p>嵌套 $n 与 logN$ 即可</p><h3 id="二、转化为ArrayList解决问题"><a href="#二、转化为ArrayList解决问题" class="headerlink" title="二、转化为ArrayList解决问题"></a>二、转化为ArrayList解决问题</h3><h4 id="导包和固定写法"><a href="#导包和固定写法" class="headerlink" title="导包和固定写法"></a>导包和固定写法</h4><pre class=" language-java"><code class="language-java">        <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>         ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> num <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　      <span class="token comment" spellcheck="true">// 可以是 Integer String Float等等，即引用数据类型</span></code></pre><hr><h4 id="定义各种数据类型"><a href="#定义各种数据类型" class="headerlink" title="定义各种数据类型"></a>定义各种数据类型</h4><p>__String__其实就是每个元素都是字符串类型的数组</p><pre class=" language-java"><code class="language-java">          ————基本数据类型————      <span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">)</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//定义并初始化</span>      <span class="token keyword">boolean</span> b<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//定义不初始化，默认值是0,null,false之类</span>      Integer a<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// </span>      <span class="token keyword">final</span> <span class="token keyword">float</span> PI <span class="token operator">=</span> <span class="token number">3.14</span>；<span class="token comment" spellcheck="true">//常量</span>      <span class="token comment" spellcheck="true">//int 0 开头表示八进制 0x开头表示十六进制</span>      <span class="token comment" spellcheck="true">// char'' String"" 也是这么定义的</span>          ————引用数据类型————        <span class="token comment" spellcheck="true">//类、接口、数组</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span>  arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//也可以int char Integer boolean都可以</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span>  arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"!"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>             ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>可不写<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意这个带括号</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//main函数，主要在这里面写东西</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方法，必须带()</span><span class="token punctuation">}</span></code></pre><h4 id="String-String-Int-和-ArrayList转换"><a href="#String-String-Int-和-ArrayList转换" class="headerlink" title="String[] String Int 和 ArrayList转换"></a>String[] String Int 和 ArrayList转换</h4><p>list 可以打印出来 [ a , 4 , ! ]<br>String 可打印为 a , 4 , !<br>String[] 可打印出 arr[ 索引 ]</p><pre class=" language-java"><code class="language-java">     <span class="token comment" spellcheck="true">//String[] 转 ArrayList   arr1==>list 主要就是Array自带的aslist</span>     String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> String <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//ArrayList 转 String[]   list==>arr和arr1</span>     String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//arr1用于接收arr，且完全覆盖，比arr长出来的部分是null</span>     <span class="token comment" spellcheck="true">//String 转 ArrayList 实际上是先转化为String[]</span>     ArrayList list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>‘<span class="token punctuation">,</span>’<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//ArrayList 转 String     join方法表示拼接</span>     String str<span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//Arraylist转 int[]</span>     <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>valueOf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//int[]转list </span>     List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list1 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h4 id="ArrayList常用方法"><a href="#ArrayList常用方法" class="headerlink" title="ArrayList常用方法"></a>ArrayList常用方法</h4><pre class=" language-java"><code class="language-java">      ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> num <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　         num<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//拼接另一个ArrayList用num.addAll(num2)</span>        num<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//按照索引删除，不会删除元素2</span>        num<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        num<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> A <span class="token operator">:</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h3 id="三、牛客华为机试"><a href="#三、牛客华为机试" class="headerlink" title="三、牛客华为机试"></a>三、牛客华为机试</h3><h4 id="HJ6-质数因子"><a href="#HJ6-质数因子" class="headerlink" title="HJ6 质数因子"></a>HJ6 质数因子</h4><p><strong>最多只有一个质数因子大于本身的平方根</strong><br>递归</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">long</span> num<span class="token punctuation">;</span>    <span class="token keyword">long</span> k <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            num <span class="token operator">/=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">""</span><span class="token operator">:</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="HJ7-取近似值"><a href="#HJ7-取近似值" class="headerlink" title="HJ7 取近似值"></a>HJ7 取近似值</h4><p>这题很像今天的科大讯飞笔试题<br>学了一个很巧妙的解法</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">float</span> number<span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="不做了今天太累了，睡觉了先！"><a href="#不做了今天太累了，睡觉了先！" class="headerlink" title="不做了今天太累了，睡觉了先！"></a>不做了今天太累了，睡觉了先！</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>牛客-华为机试笔记</title>
      <link href="/2022/081847630.html"/>
      <url>/2022/081847630.html</url>
      
        <content type="html"><![CDATA[<h2 id="HJ5-进制转换"><a href="#HJ5-进制转换" class="headerlink" title="HJ5 进制转换"></a>HJ5 进制转换</h2><h4 id="固定写法"><a href="#固定写法" class="headerlink" title="固定写法"></a>固定写法</h4><pre class=" language-java"><code class="language-java">     <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner     Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>     String str <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>nextLine 读取到的是换行符</li><li>next  读取到的是空格或换行符</li><li>hasNext 判断是否有非空字符</li><li>hasNextLine 判断是否有下一行</li></ul><h4 id="十六进制转十进制"><a href="#十六进制转十进制" class="headerlink" title="十六进制转十进制"></a>十六进制转十进制</h4><h5 id="从右到左-第i位数字（A–F对应10–15）乘以-16-i-求和即为所得。"><a href="#从右到左-第i位数字（A–F对应10–15）乘以-16-i-求和即为所得。" class="headerlink" title="从右到左 第i位数字（A–F对应10–15）乘以$16^i$  求和即为所得。"></a>从右到左 第i位数字（A–F对应10–15）乘以$16^i$  求和即为所得。</h5><p>例如25A=10×$16^0$+5×$16^1$+2×$16^2$<br>即25A(16) = 602 (10)</p><p>点击<a href="https://tool.oschina.net/hexconvert/">这里</a>验证结果是否正确。</p><hr><h5 id="java偷懒法"><a href="#java偷懒法" class="headerlink" title="java偷懒法"></a>java偷懒法</h5><pre class=" language-java"><code class="language-java">     <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0x16</span>；     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//输出20；</span></code></pre><h4 id="字符串倒转"><a href="#字符串倒转" class="headerlink" title="字符串倒转"></a>字符串倒转</h4><pre class=" language-java"><code class="language-java">     String str <span class="token operator">=</span> <span class="token string">"Abc123"</span>     StringBuffer str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     str <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>需要注意StringBuffer类需要通过toString方法才可以变回原来的字符串</p><h4 id="获取第i个字符并转数字"><a href="#获取第i个字符并转数字" class="headerlink" title="获取第i个字符并转数字"></a>获取第i个字符并转数字</h4><pre class=" language-java"><code class="language-java">          <span class="token keyword">char</span> a <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//   注意这里类型为char了 如果要赋值需要单引号</span>          <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> a <span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> c <span class="token operator">=</span> a<span class="token operator">-</span><span class="token number">48</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//   48 是 0 的ASCII码</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>重新搭建的博客</title>
      <link href="/2022/0817undefined.html"/>
      <url>/2022/0817undefined.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/0817undefined.html"/>
      <url>/2022/0817undefined.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
