<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Blind75-Day4</title>
      <link href="/2022/090534945.html"/>
      <url>/2022/090534945.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Blind75 Day3</title>
      <link href="/2022/090435821.html"/>
      <url>/2022/090435821.html</url>
      
        <content type="html"><![CDATA[<ol start="8"><li>旋转数组搜索2.0</li></ol><blockquote><p>输入：nums = [4,5,6,7,0,1,2], target = 0<br>输出：4</p></blockquote><blockquote><p>思路 分为中点左右两种，每种依次三种</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token operator">&amp;&amp;</span>target <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>       <span class="token punctuation">{</span>                      <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">>=</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//中点在左</span>           <span class="token punctuation">{</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">>=</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>target<span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//target在左--中点</span>                right <span class="token operator">=</span> mid<span class="token punctuation">;</span>                <span class="token keyword">else</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">else</span>           <span class="token comment" spellcheck="true">//中点在右</span>           <span class="token punctuation">{</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">></span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>target<span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//target在中--右点</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                right <span class="token operator">=</span> mid <span class="token punctuation">;</span>           <span class="token punctuation">}</span>           mid <span class="token operator">=</span> <span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">//这里超级重要</span>               <span class="token keyword">return</span> mid<span class="token punctuation">;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>               <span class="token keyword">return</span> left<span class="token punctuation">;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>               <span class="token keyword">return</span> right<span class="token punctuation">;</span>               <span class="token punctuation">}</span>       <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><ol start="9"><li>三数之和</li></ol><blockquote><p>输入：nums = [-1,0,1,2,-1,-4]<br>输出：[[-1,-1,2],[-1,0,1]]<br>解释：和为0 且不能重复</p></blockquote><blockquote><p>双指针，仅遍历a,对于每个b,取另一头的c,如果和较小，b右移，否则c左移，直至相撞为止。</p></blockquote><blockquote><p>学习的知识 ： break 跳出所有循环  continue跳出当前这次循环<br><code>ArrayList&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;List&lt;Integer&gt;&gt;();</code>实现<code>[[ ],[ ]]</code></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 排序</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>a <span class="token operator">&lt;</span> len<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                     <span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>           <span class="token keyword">int</span> c <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>           <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">&lt;</span>c<span class="token punctuation">)</span>           <span class="token punctuation">{</span>                  <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>ans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//去重</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>               c<span class="token operator">--</span><span class="token punctuation">;</span>               <span class="token keyword">else</span> b<span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><ol start="10"><li>盛水最多的容器<br><img src="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg" alt="图片"></li></ol><blockquote><p>输入高度数组，长度就是索引差</p></blockquote><blockquote><p>思路 ： 双指针，因为收缩时候长度减小，所以哪边低就往哪边收缩，得到的必然是最大值</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxArea</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> L <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> R <span class="token operator">=</span> height<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>L<span class="token operator">&lt;</span>R<span class="token punctuation">)</span>        <span class="token punctuation">{</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token operator">&lt;</span>height<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//左边低，就右移找</span>           <span class="token punctuation">{</span>               index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>height<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>R<span class="token operator">-</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              L<span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>             <span class="token keyword">else</span>            <span class="token punctuation">{</span>               index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>height<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>R<span class="token operator">-</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               R<span class="token operator">--</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>                  <span class="token punctuation">}</span> <span class="token keyword">return</span> index<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><ol start="11"><li>两整数之和</li></ol><blockquote><p>不用+ - 求和</p></blockquote><blockquote><p>思路：异或用于无符号加，相与找到进位的地方，左移一位填1，直至进位是0</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//异或--无进位加法</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//利用与运算找到进位的位，左移一位就是需要的部分</span>            a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//无进位加法，如果进位再次是1，运行下一次循环，直到进位全0</span>            b <span class="token operator">=</span> carry<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><ol start="12"><li>位1的个数<blockquote><p>输入：00000000000000000000000000001011<br>输出：3 (3个1)</p></blockquote></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ret<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//偷懒写法 Integer.bitCount(n);</span></code></pre><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue草泥马的踩坑</title>
      <link href="/2022/083113711.html"/>
      <url>/2022/083113711.html</url>
      
        <content type="html"><![CDATA[<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><blockquote><p>public/index.html 有个div id=app,全挂载在这个div盒子里了</p></blockquote><blockquote><p>需要重新npm run serve才能更新页面</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Blind75-Day2</title>
      <link href="/2022/083129116.html"/>
      <url>/2022/083129116.html</url>
      
        <content type="html"><![CDATA[<h3 id="6-乘积最大子数组"><a href="#6-乘积最大子数组" class="headerlink" title="6. 乘积最大子数组"></a>6. 乘积最大子数组</h3><blockquote><p>输入: nums = [2,3,-2,4]<br>输出: 6<br>解释: 子数组 [2,3] 有最大乘积 6。</p></blockquote><blockquote><p>分析：maxDp存到i结尾的最大值，minDp存到i结尾的最小值 因为没有用数组的第i-1，所以多定义一个maxdp存i-1的</p></blockquote><pre class=" language-java"><code class="language-java"> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> maxDp <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> minDp <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> maxDp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> maxdp <span class="token operator">=</span> maxDp<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// int mindp = minDp;        </span>        maxDp <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxDp<span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>minDp<span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         minDp <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>minDp<span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>maxdp<span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxDp<span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>         <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><h3 id="7-寻找旋转数组最小值"><a href="#7-寻找旋转数组最小值" class="headerlink" title="7. 寻找旋转数组最小值"></a>7. 寻找旋转数组最小值</h3><blockquote><p>输入：nums = [3,4,5,1,2]<br>输出：1<br>解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组</p></blockquote><blockquote><p>思路：遍历数组，简化复杂度采用二分查找</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findMin</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> high <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;</span>high<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">)</span>          low <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">else</span>           high <span class="token operator">=</span> mid<span class="token punctuation">;</span>          mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>blind75-Day1</title>
      <link href="/2022/083028513.html"/>
      <url>/2022/083028513.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h3><blockquote><p>输入：nums = [2,7,11,15], target = 9<br> 输出：[0,1]<br> 解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</p></blockquote><blockquote><p>思路：哈希表contain</p></blockquote><pre class=" language-java"><code class="language-java"> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> A <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">//若哈希表里包含差，就返回下标，否则填入</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>A<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">}</span> <span class="token punctuation">;</span>             A<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">//需要注意获取下标，所以把value填成下标 key为nums[i]</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><hr><h3 id="2-买卖股票的最佳时机"><a href="#2-买卖股票的最佳时机" class="headerlink" title="2. 买卖股票的最佳时机"></a>2. 买卖股票的最佳时机</h3><blockquote><p>输入：[7,1,5,3,6,4]<br>   输出：5<br>   解释：最大利润为6-1 = 5。<br>也有可能递减，就是最大利润0；</p></blockquote><blockquote><p>思路：动态规划问题 Dp[i]表示第i天卖出的最大利润，Dp[i] = nums[i] - min(i-1) 遍历找最大i</p></blockquote><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span> prices<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//更新到目前为止的最小值</span>                min <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果不是最小值，求当前值与当前最小值的差</span>                max <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><hr><h3 id="3-存在重复元素"><a href="#3-存在重复元素" class="headerlink" title="3. 存在重复元素"></a>3. 存在重复元素</h3><blockquote><p>nums = [1,2,3,1]<br>  输出：true</p></blockquote><blockquote><p>思路：set不重复性，注意循环解构</p></blockquote><pre class=" language-java"><code class="language-java"> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>     HashSet<span class="token operator">&lt;</span>Integer<span class="token operator">></span> A <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> nums<span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>A<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  else A.add(nums[i]);</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><hr><h3 id="4-除自身外数组乘积"><a href="#4-除自身外数组乘积" class="headerlink" title="4. 除自身外数组乘积"></a>4. 除自身外数组乘积</h3><blockquote><p>输入: nums = [1,2,3,4]<br>输出: [24,12,8,6]</p></blockquote><blockquote><p>思路：乘积分为左右，左1右1记得初始化</p></blockquote><pre class=" language-java"><code class="language-java"> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">productExceptSelf</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> answer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>        left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        right<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>len<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            right<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            answer<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>right<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token keyword">return</span> answer<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><blockquote><p>优化：left直接用answer，空间复杂度降为O(1)</p></blockquote><hr><h3 id="5-最大子数组和"><a href="#5-最大子数组和" class="headerlink" title="5. 最大子数组和"></a>5. 最大子数组和</h3><blockquote><p>输入：nums = [-2,1,-3,4,-1,2,1,-5,4]<br>输出：6<br>解释：连续子数组 [4,-1,2,1] 的和最大，为 6 </p></blockquote><blockquote><p>动态规划 Dp[i]表示第i个作为结尾的最大数组，Dp[i] = max(Dp[i-1],nums[i]),遍历找最大i</p></blockquote><pre class=" language-java"><code class="language-java"> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> pre <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            pre <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>pre <span class="token operator">+</span> x<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果累加不如自己大，扔掉从当前开始</span>            max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> pre<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 实际上是找每个i结尾的最大子数组的最大值</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端面试学习</title>
      <link href="/2022/082745272.html"/>
      <url>/2022/082745272.html</url>
      
        <content type="html"><![CDATA[<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><h4 id="head，-body，！Doctype的作用"><a href="#head，-body，！Doctype的作用" class="headerlink" title="head， body，！Doctype的作用"></a>head， body，！Doctype的作用</h4><blockquote><ul><li>！Doctype指示用什么版本HTML（html5,xml,html4.01)</li><li>head 含 meta和title</li><li>body文档主体 盒子标签 style之类的</li></ul></blockquote><hr><h4 id="HTML5新特性"><a href="#HTML5新特性" class="headerlink" title="HTML5新特性"></a>HTML5新特性</h4><ol><li>选择器<code>document.querySelector(All)</code></li><li>媒体播放<code>video audio</code></li><li>本地存储 <code>localStorage sessionStorage</code></li><li>语义化标签 </li><li>全双工通信协议 <code>websocket</code></li><li>表单控件 <code>email date time search</code></li><li>移除<code>big center strike(s) u</code> 可用css text-decoration实现</li><li>移除<code>frame frameset noframes</code></li></ol><hr><h4 id="伪类和伪元素"><a href="#伪类和伪元素" class="headerlink" title="伪类和伪元素"></a>伪类和伪元素</h4><table><thead><tr><th align="center">表头</th><th align="center">伪类</th><th align="center">伪元素</th></tr></thead><tbody><tr><td align="center">选择</td><td align="center">常用于选择元素的某种状态</td><td align="center">常用选择一个位置</td></tr><tr><td align="center">CSS3里</td><td align="center">一个冒号</td><td align="center">两个冒号</td></tr><tr><td align="center">拼接</td><td align="center">可拼接</td><td align="center">不可拼接</td></tr><tr><td align="center">dom</td><td align="center">基于DOM</td><td align="center">DOM外新生成</td></tr></tbody></table><ul><li>同时出现，伪类在前</li></ul><hr><h4 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h4><ul><li>新增的 <code>header nav footer article section</code></li><li>原有的 <code>small strong cite del</code><blockquote><p>优点是<br>①提高可读性 减少维护成本<br>②即使不加style 也能有很好的结构</p></blockquote></li></ul><hr><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="let-const-var"><a href="#let-const-var" class="headerlink" title="let const var"></a>let const var</h4><table><thead><tr><th align="center">var</th><th align="center">let</th><th align="center">const</th></tr></thead><tbody><tr><td align="center">声明前可用undefined 可改</td><td align="center">声明前不可用 可改</td><td align="center">声明且必须赋值 可用数组或对象改</td></tr><tr><td align="center">可重复声明</td><td align="center">不可重复声明</td><td align="center">不可重复声明</td></tr><tr><td align="center">全局作用域</td><td align="center">大括号块级作用域</td><td align="center">大括号块级作用域</td></tr></tbody></table><hr><h4 id="Javascript数据类型"><a href="#Javascript数据类型" class="headerlink" title="Javascript数据类型"></a>Javascript数据类型</h4><blockquote><ul><li>基本 Number,String(“‘`),Boolean,null,undefined,symbol,bigint</li><li>引用 object (对象数组函数)</li><li>基本存在栈 引用存在堆 空间大 大小动态 运行慢 无序</li></ul></blockquote><hr><h4 id="判断数据类型"><a href="#判断数据类型" class="headerlink" title="判断数据类型"></a>判断数据类型</h4><blockquote><ul><li>typeof 无法区分Object Array null</li><li>instanceof 判断引用数据类型 不能判断基本数据类型</li><li>xsl.constructor</li><li>object.prototype.toString.call() 返回object+类型/对象名</li></ul></blockquote><pre class=" language-Javascript"><code class="language-Javascript">typeOf(symbol(1))[1,2] instanceOf Array</code></pre><hr><h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h4><ul><li>用于对象合并</li></ul><pre class=" language-Javascript"><code class="language-Javascript">let obj1 = {a:1}let obj2 = {b:2}let obj3 = {c:3}Object.assign(obj1,obj2,obj3) //合并到obj1中 相同属性覆盖 // 基本数据类型复制后就不变了 引用数据类型随时改变---</code></pre><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><pre class=" language-Javascript"><code class="language-Javascript">var a = new Number(66)a.__proto__ === Number.prototype //truea.constructor //ƒ Number() { [native code] }Number.constructor//ƒ Function() { [native code] }</code></pre><hr><h4 id="forEach-和-map"><a href="#forEach-和-map" class="headerlink" title="forEach 和 map"></a>forEach 和 map</h4><pre class=" language-Javascript"><code class="language-Javascript">var arr = [1,2,3,4]arr.forEach((a,b,c)=>{ a*=2 })  //不会更改原数组。除非重新赋值 arr[0] = 5//forEach没有返回数据 map会arr.map((a,b,c)=>{ a*=2 })                        </code></pre><hr><h4 id="语言类型"><a href="#语言类型" class="headerlink" title="语言类型"></a>语言类型</h4><blockquote><p>Javascript是动态语言类型,只有在程序运行了一次的时候错误才会被发现 即使有错误也能编译通过</p></blockquote><hr><h4 id="indexof"><a href="#indexof" class="headerlink" title="indexof"></a>indexof</h4><blockquote><p>xxx.indexof(xx,1)<br>若括号不写，默认是”undefined” undefine也返回-1<br>若索引超出，按照0开始找 后面超出就-1</p></blockquote><hr><h4 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h4><blockquote><ul><li>优点：原封不动显示一个新网页；嵌套自己，显示头部内容；把加载缓慢的引用图标iframe表示</li><li>缺点：阻塞onload；影响页面性能；iframe过多影响体验；增加http请求</li></ul></blockquote><hr><h4 id="null-和-undefined-的区别"><a href="#null-和-undefined-的区别" class="headerlink" title="null 和 undefined 的区别"></a>null 和 undefined 的区别</h4><blockquote><ul><li>null表示栈中变量没有指向堆中的内存对象</li><li>undefined不初始化变量、访问对象中未定义属性、函数形参未传入实参</li></ul></blockquote><hr><h4 id="数组和伪数组"><a href="#数组和伪数组" class="headerlink" title="数组和伪数组"></a>数组和伪数组</h4><blockquote><ul><li>伪数组是自定义length属性的对象，但instanceof proto.constructor 都是object</li><li>Array.from()转换 取决于length 索引不连续时 自动补undefined 索引只考虑0“0” 1 ..无负数等</li><li>Array.prototype.slice.call()转换</li></ul></blockquote><hr><h4 id="Set、Map、WeakSet-和-WeakMap-的区别"><a href="#Set、Map、WeakSet-和-WeakMap-的区别" class="headerlink" title="Set、Map、WeakSet 和 WeakMap 的区别"></a>Set、Map、WeakSet 和 WeakMap 的区别</h4><table><thead><tr><th align="center">Set</th><th align="center">Map</th><th align="center">WeakSet</th><th align="center">WeakMap</th></tr></thead><tbody><tr><td align="center">成员不可重复</td><td align="center">键值不可重复，会覆盖</td><td align="center">成员均对象</td><td align="center">键名均对象</td></tr><tr><td align="center">类似数组 只有键值</td><td align="center">键值对</td><td align="center">保存DOM节点不易内存泄漏不计入垃圾回收</td><td align="center">对象不计入垃圾回收机制</td></tr><tr><td align="center">可遍历</td><td align="center">可遍历</td><td align="center">不可遍历</td><td align="center">不可遍历</td></tr></tbody></table><hr><h4 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h4><p><strong>内存泄漏指被分配的内存不能用也不能回收，只能等浏览器关闭</strong></p><ul><li>var全局变量 (定义给window对象了)</li><li>闭包             局部变量执行完了就被销毁了 内部函数若没有执行完成，例如当作返回值调用就不会被销毁         </li><li>console.log         </li><li>DOM泄露             进行一些删除工作时，已经缓存的DOM没有被释放 设置null</li><li>被遗忘的计时器       setTimeOut setInterval等用完了记得clear</li></ul><hr><h4 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h4><pre class=" language-Javascript"><code class="language-Javascript">     var s = `我是             "你爹"`             //支持换行ul li方便     innerHTML = ${s}         //引用变量</code></pre><hr><h4 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性"></a>ES6新特性</h4><blockquote><p>var[a,b,c] = [1,2,3]    //解构表达式 可以用于交换变量值 还可以花括号加索引1：’xsl’<br>[…new Set(arr)] 去重<br>let const Promise Symbol</p></blockquote><hr><h4 id="为什么js是单线程"><a href="#为什么js是单线程" class="headerlink" title="为什么js是单线程"></a>为什么js是单线程</h4><blockquote><p>主要与js用途有关，js是浏览器的脚本语言，操作DOM树之类的决定它只能是单线程，否则会带来很复杂的同步问题。如果多线程，两个线程操作同一个DOM元素就会让浏览器不知所措，<br>进程是CPU分配资源的最小单位<br>线程是CPU调度的最小单位<br>打开一个页面就是一个进程，包含了http请求js引擎等线程</p></blockquote><hr><h4 id="死锁-暂时性死区"><a href="#死锁-暂时性死区" class="headerlink" title="死锁 暂时性死区"></a>死锁 暂时性死区</h4><blockquote><ul><li>两个或以上进程在执行中互相争夺资源造成阻塞<br>① 资源只能被一个线程使用<br>② 不可抢占<br>③ 用下一个资源的时候等待且占有<br>④ 一等二 二等一 死锁</li></ul></blockquote><blockquote><ul><li>TDZ指初始化前调用</li></ul></blockquote><pre class=" language-java"><code class="language-java">  t<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//let t;</span></code></pre><hr><h4 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h4><ul><li>对于基本数据类型a <code>let b = a</code>  <code>b=100 </code>不会改变a，而是b另开辟新地址存100</li><li>对于引用数据类型 b改变后是多少 a跟着变为多少</li><li>一般的concat slice 都是浅拷贝 想深拷贝可以转JSON对象再转回<code>JSON.parse(JSON.stringify('abc'))</code></li></ul><hr><h4 id="防抖节流"><a href="#防抖节流" class="headerlink" title="防抖节流"></a>防抖节流</h4><blockquote><p>用户频繁触发事件 只要最后一次事件就叫防抖<br>例如 oninput加setTimeOut 若回调了 就clearTimeOut</p></blockquote><blockquote><p>节流控制执行次数 setTimeOut内改变flag可以控制执行次数</p></blockquote><hr><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><blockquote><p>函数嵌套函数 里面的函数就是闭包</p></blockquote><pre class=" language-Javascript"><code class="language-Javascript">function out(){  let a = 10 ;    function in (){     console.log(a)   //内部没有a 就依次往外找 所谓作用域链  }  return in;         }</code></pre><hr><h4 id="等于"><a href="#等于" class="headerlink" title="等于"></a>等于</h4><p><code> 6 == '6'</code> <code> true == 1</code>\ <code>"" == " "== 0</code>\ <code>null == undefined !=""</code><br><code>false != 'false'</code>\ <code>NaN != NaN</code> </p><blockquote><p>仨等号不进行强转 </p></blockquote><hr><h4 id="document-write-和-innerHTML"><a href="#document-write-和-innerHTML" class="headerlink" title="document.write 和 innerHTML"></a>document.write 和 innerHTML</h4><blockquote><p>write 不会前后覆盖，如果script标签写在最后会阻塞所有前面解析的html 是方法<br>元素.innerHTML 直接填充 会覆盖 是属性</p></blockquote><hr><h4 id="求交叉并补集"><a href="#求交叉并补集" class="headerlink" title="求交叉并补集"></a>求交叉并补集</h4><p><code>var e = a.filter(function(v){ return !(b.indexOf(v) &gt; -1) })</code><br>        <code>.concat(b.filter(function(v){ return !(a.indexOf(v) &gt; -1)}))</code><br>        // a里面的所有b(index&gt;-1表示所有) 和 b里面的所有a<br><code>let e = [...a.filter(x =&gt; !sb.has(x)), ...b.filter(x =&gt; !sa.has(x))];</code><br>//es6新特性 Set a和b </p><hr><h4 id="获取当前页面url"><a href="#获取当前页面url" class="headerlink" title="获取当前页面url"></a>获取当前页面url</h4><ul><li>window.location.href</li></ul><hr><h4 id="逆序输出"><a href="#逆序输出" class="headerlink" title="逆序输出"></a>逆序输出</h4><p><code>split("").reverse().join("")</code></p><p><code>var nstr = "";</code><br><code> for (var x = str.length-1; x &gt;= 0; x--) { nstr+=str.charAt(x) }</code></p><h3 id="手写xxx"><a href="#手写xxx" class="headerlink" title="手写xxx"></a>手写xxx</h3><h4 id="手写instanceof"><a href="#手写instanceof" class="headerlink" title="手写instanceof"></a>手写instanceof</h4><pre class=" language-Javascript"><code class="language-Javascript">function instanceOf(child, father) {     let R = father.prototype; // 取右表达式的 prototype 值    L = child.__proto__; // 取左表达式的__proto__值    while (true) {        if (L === null) {            return false;            }        if (L === R) {            return true;            }         L = L.__proto__     }}</code></pre><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><p><code>var arr = [1,2,3,4,4]</code><br><code>var arr_after</code></p><h5 id="ES6-Set方法"><a href="#ES6-Set方法" class="headerlink" title="ES6 Set方法"></a>ES6 Set方法</h5><pre class=" language-Javascript"><code class="language-Javascript">var mySet = new Set(arr);arr_after = Array.from(mySet);//简写为 arr_after = [...new Set(arr)] </code></pre><blockquote><p>无法去除{}空对象</p></blockquote><hr><h5 id="splice方法"><a href="#splice方法" class="headerlink" title="splice方法"></a>splice方法</h5><blockquote><p>两层for循环 对比前后两个<code>arr.splice(j,1)</code>删除索引j后面那个(splice还可以把想添加的写后面)<br>NaN和{}去不掉，null会直接消失</p></blockquote><hr><h5 id="indexof、includs方法"><a href="#indexof、includs方法" class="headerlink" title="indexof、includs方法"></a>indexof、includs方法</h5><blockquote><p>创建一个结果数组，遍历原数组，在原数组里对比原数组index或include，没有就存入<code>array.push(arr[i])</code><br>这里注意indexOf可以判断索引是否为-1 或第i个是否为i 两种方法</p></blockquote><h5 id="sort方法"><a href="#sort方法" class="headerlink" title="sort方法"></a>sort方法</h5><blockquote><p>原数组排序<code>arr.sort()</code>循环对比，存入新数组<br>不能比对NaN和{}</p></blockquote><h5 id="Map结构"><a href="#Map结构" class="headerlink" title="Map结构"></a>Map结构</h5><p><code>if(!map.has(arr[i]))</code> =&gt; <code>map.set;array.push</code></p><hr><h3 id="异步相关"><a href="#异步相关" class="headerlink" title="异步相关"></a>异步相关</h3><h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><pre class=" language-Javascript"><code class="language-Javascript">    setTimeOut(function callback(){},3000)    setTimeOut(()=>{},3000) //箭头函数简写</code></pre><blockquote><p>执行代码先放在调用栈 setTimeOut是一个API 表示3s后执行 就直接从栈里移除 放入消息队列<br>  3秒以后 找微任务队列的 压入调用栈执行 最后Event Loop循环消息队列找回调函数 </p></blockquote><blockquote><p>回调地狱 指多个setTimeOut嵌套 可读性变差</p></blockquote><hr><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><blockquote><p>new Promise </p></blockquote><ul><li>resolve =&gt; then  =&gt; finally  可加多个.then 避免回调地狱</li><li>reject  =&gt; catch =&gt; finally</li><li>三种状态 pending fulfiled rejected</li></ul><hr><h4 id="async-await"><a href="#async-await" class="headerlink" title="async await"></a>async await</h4><blockquote><p>本质是语法糖</p></blockquote><pre class=" language-Javascript"><code class="language-Javascript">     async function xsl1(){return 4} //自动封装为promise对象返回     async function xsl2(){return Promise.resolve(4)}     Promise.resolve(4).then(a=>{函数体})      const a = await Promise.resolve(4) //等价 await 4  /await xsl()     </code></pre><blockquote><p>执行顺序问题 </p></blockquote><ul><li>先同步，后异步</li><li>async函数内部的await后面相当于setTimeOut了</li></ul><hr><h4 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h4><blockquote><ul><li>宏任务 setTimeOut setInterval  DOM事件  AJAX请求</li><li>微任务 Promise  async/await<br>微任务执行早于宏任务</li></ul></blockquote><hr><h4 id="defer-和-async"><a href="#defer-和-async" class="headerlink" title="defer 和 async"></a>defer 和 async</h4><blockquote><p>同步执行 遇到script标签内如果有外部链接网络慢，需要等待很久才继续加载HTML<br>async 异步执行   下载同时加载页面 但脚本不一定是否在加载完成前执行<br>defer 推迟       要求脚本必须在页面加载完再执行 适用于与DOM相关</p></blockquote><h4 id="Promise-All"><a href="#Promise-All" class="headerlink" title="Promise.All"></a>Promise.All</h4><ul><li>语法<br><code>Promise.all([a,b,c]).then((res)=&gt;{})</code></li><li>表示a,b,c三个promise对象都完成后执行res函数</li></ul><hr><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><h4 id="call-bind-apply"><a href="#call-bind-apply" class="headerlink" title="call bind apply"></a>call bind apply</h4><blockquote><p>bind不会调用函数 可以用返回值接收 apply参数是[]<br>call是函数的方法，xsl.eat.call(abc，”张烁”) 表示把xsl对象的eat函数的this指向改为abc对象<br>且令abc对象的eat属性为”张烁”  且可以并列</p></blockquote><hr><h4 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h4><blockquote><ul><li>全局是window</li><li>对象内部 指向该对象 因为是该对象调用了这个函数</li></ul></blockquote><hr><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p><code>const fun = (x,y) =&gt; {}</code> </p><ul><li>一个参数，x的括号也可以省略</li><li>函数体只有一个return可以直接<code>=&gt;100</code> </li><li>在哪里定义 this指向哪里且不可变 不可作为构造函数</li><li>没有arguments和prototype</li></ul><hr><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><h4 id="new"><a href="#new" class="headerlink" title="new"></a>new</h4><ul><li>创建新对象{}</li><li>设置proto和constructor</li><li>this被重定向为实例化对象</li></ul><hr><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><h4 id="文件引入方式"><a href="#文件引入方式" class="headerlink" title="文件引入方式"></a>文件引入方式</h4><blockquote><p>link除了CSS图片还能引用图片音乐<br>link在页面加载时加载，@import页面加载完<br>import有的浏览器不支持</p></blockquote><p> <code>&lt;link href="index.css" rel="stylesheet"&gt;</code><br><code>&lt;style type="text/css"&gt;  @import url(index.css);  &lt;/style&gt;</code></p><hr><h4 id="继承-1"><a href="#继承-1" class="headerlink" title="继承"></a>继承</h4><blockquote><ul><li>有继承的 font系列 text-align color除a标签 visibilty list-stylesheet</li><li>无继承的 display vertical-align text-装饰阴影 盒子模型的margin border padding等<br>  背景 定位 content</li></ul></blockquote><hr><h4 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h4><blockquote><ul><li>W3C模型(标准)width 100px; padding 10px; border 1px</li><li>IE模型(怪异) width 78px;<br><code>dom.offsetWidth/offsetHeight</code> js取当前的宽高<br><code>box-sizing: border-box</code>  切换怪异模型，content-box默认、</li></ul></blockquote><hr><h4 id="BFC-块级格式化"><a href="#BFC-块级格式化" class="headerlink" title="BFC 块级格式化"></a>BFC 块级格式化</h4><p><code>position : absolute/fixed</code><br><code>float : left  ===&gt; overflow:auto</code><br><code> display : flex / inline-block</code><br><code> HTML table</code></p><hr><h4 id="样式优先级"><a href="#样式优先级" class="headerlink" title="样式优先级"></a>样式优先级</h4><blockquote><p>选择器： ID &gt; Class/属性/伪类 &gt; 标签/伪元素<br>行内 &gt; 选择器 !important最高<br>(0,0,0,0) 分别上述四个，大的优先级高</p></blockquote><hr><h4 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h4><blockquote><ol><li><code>padding-top/buttom</code>        父元素必须不固定高度</li><li><code>line-height</code> 配合<code>margin:0</code>; 但不能用于多行文字</li><li>父元素<code>display:table</code> 子元素<code>table-cell</code>且<code>vertical-align:middle'</code></li><li><code>display:flex/grid</code> <code>jastify-content:center</code> 兼容性不好 IE9+</li><li><code>position:absolute</code> <code>top:50%</code> <code>transform:translate(-50%)</code></li></ol></blockquote><hr><h4 id="画图形"><a href="#画图形" class="headerlink" title="画图形"></a>画图形</h4><blockquote><p>等腰</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">100</span>px solid transparent<span class="token punctuation">;</span>        <span class="token property">border-bottom-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>圆形<br><code>border-radius=50%+</code></p></blockquote><hr><h4 id="多栏布局"><a href="#多栏布局" class="headerlink" title="多栏布局"></a>多栏布局</h4><blockquote><p>两栏为例</p></blockquote><ol><li>左盒子<code>float:left</code> 右盒子<code>margin-left=width(左)</code></li><li>右盒子BFC <code>overflow:hidden</code> 或 position</li><li>主盒子<code>display:flex</code> 右盒子<code>flex:1</code>自动填充左盒子</li><li>主盒子<code>display:table</code> 左盒子加宽 俩都<code>table-ceil</code><blockquote><p>总结 自己计算margin、BFC、flex:1自适应、table、</p></blockquote></li></ol><hr><h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><ol><li>末尾选择添加空元素，<code>clear:both</code></li><li>BFC <code>overflow:auto</code>或整个父元素float</li><li>伪元素</li></ol><pre class=" language-css"><code class="language-css"><span class="token selector">div<span class="token pseudo-element">::after</span></span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*空*/</span>    <span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*插入伪元素是行内元素，要转化块*/</span>    <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><hr><h4 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h4><blockquote><p>em相对的 浏览器默认16px 所以<code>1em=16px</code><br>但也可以<code>div{font-size: 50%;}</code> <code>1em=8px</code>本身px&gt;父em<br>rem r表示root <code>html{font-size:20px}</code></p></blockquote><hr><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><h4 id="cookie-localStorage-sessionStorage"><a href="#cookie-localStorage-sessionStorage" class="headerlink" title="cookie localStorage sessionStorage"></a>cookie localStorage sessionStorage</h4><blockquote><p>cookie数据始终在同源的http请求中携带（即使不需要）小于4k<br>sessionStorage：当前浏览器窗口关闭之前有效 有效区域仅该窗口<br>localStorage：始终有效，窗口或浏览器关闭也存在<br>cookie：只在设置的cookie过期时间之前有效</p></blockquote><blockquote><p>localStorage不可跨域 不可被爬取 读取字符串</p></blockquote><hr><h4 id="输入url发生了什么"><a href="#输入url发生了什么" class="headerlink" title="输入url发生了什么"></a>输入url发生了什么</h4><ul><li>缓存里找url</li><li>查询DNS(url=&gt;ip)本质是数据库</li><li>TCP三次握手</li><li>HTTP发起请求</li><li>服务器处理请求，浏览器接收响应</li><li>渲染页面 四次挥手</li></ul><hr><h4 id="浏览器渲染页面步骤"><a href="#浏览器渲染页面步骤" class="headerlink" title="浏览器渲染页面步骤"></a>浏览器渲染页面步骤</h4><ul><li>HTML转为DOM树</li><li>CSS解析为CSSOM树 同步的</li><li>js标签一般写最后</li></ul><hr><h4 id="重绘重排"><a href="#重绘重排" class="headerlink" title="重绘重排"></a>重绘重排</h4><blockquote><p>DOM变化使浏览器重新计算元素几何属性，其他元素受到影响。需要重新构造DOM 就叫重排，受影响的部分重新绘制</p></blockquote><ul><li>引发原因：DOM元素添加删除 元素尺寸变化 浏览器窗口变化</li><li>避免：table布局 修改样式尽量css用选择器 布局信息改变不查询</li></ul><hr><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><ol><li>加载优化：减少http请求(删除不必要图像注释 合并css js) 、懒加载 、css头js尾、iframe</li><li>运行优化：避免重绘重排 尽量使用原生方法 避免空的src</li><li>防抖节流，html内联样式尽量少，尽量用id选择器</li></ol><hr><h4 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h4><ol><li>XSS 注入恶意代码使用户执行，可能会拿到cookie Localstorage,发起非本意行为，DDos攻击</li></ol><ul><li>分为存储=&gt;最严重 DOM（js自身的漏洞 反射型（url注入</li><li>例如 反射型：我点了陌生链接 正常访问服务器，服务器返回了xss脚本和正常页面，执行xss脚本就访问量恶意服务器</li><li>解决：过滤非法字符，输入长度限制，跳转链接监测</li></ul><ol start="2"><li>CSRF 跨站请求伪造 B站向A站发恶意请求，因为cookie A以为是用户发的就执行了。</li></ol><ul><li>解决 尽量不用get，关键操作需要发验证码</li></ul><hr><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><h4 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h4><ul><li>同源策略 ：协议 域名 端口号必须相同才可以访问localStroge、cookie等</li><li>针对js和ajax的<br><code>&lt;img src='xxx'&gt;</code><br><code>&lt;link href='xxx'&gt;</code><br><code>&lt;script src='xxx'&gt;</code></li></ul><ol><li>JSONP就是利用了html标签</li><li>Node中间件代理，利用了服务器之间没有同源策略，把请求发给服务器，服务器请求后返回给客户</li></ol><hr><h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><table><thead><tr><th align="center">1xx</th><th align="center">继续操作</th><th align="center">需要进一步操作</th></tr></thead><tbody><tr><td align="center">100</td><td align="center">continue</td><td align="center">客户继续请求</td></tr><tr><td align="center">101</td><td align="center">切换协议</td><td align="center">可能是协议版本过低</td></tr></tbody></table><table><thead><tr><th align="center">2xx</th><th align="center">接受请求</th><th align="center">请求已成功被服务器接收、理解、并接受</th></tr></thead><tbody><tr><td align="center">200</td><td align="center">成功</td><td align="center">服务器提供了请求的网页</td></tr><tr><td align="center">201</td><td align="center">用户新建或修改数据成功</td><td align="center"></td></tr><tr><td align="center">202</td><td align="center">接受请求尚未处理</td><td align="center"></td></tr><tr><td align="center">204</td><td align="center">无内容</td><td align="center">已经接受请求，但无返回信息</td></tr></tbody></table><table><thead><tr><th align="center">3xx</th><th align="center">重定向</th><th align="center">表示要完成请求，需要进一步操作。</th></tr></thead><tbody><tr><td align="center">301</td><td align="center">永久重定向</td><td align="center">自动返回新地址</td></tr><tr><td align="center">302/7</td><td align="center">临时重定向</td><td align="center">仍使用原来的</td></tr><tr><td align="center">306</td><td align="center">已被废弃</td><td align="center"></td></tr></tbody></table><table><thead><tr><th align="center">4xx</th><th align="center">客户端错误</th><th align="center">语法错误或无法完成</th></tr></thead><tbody><tr><td align="center">400</td><td align="center">语法错误</td><td align="center"></td></tr><tr><td align="center">401</td><td align="center">要求客户身份认证</td><td align="center"></td></tr><tr><td align="center">403</td><td align="center">服务器理解 但拒绝</td><td align="center"></td></tr><tr><td align="center">404</td><td align="center">无法找到资源</td><td align="center"></td></tr><tr><td align="center">408</td><td align="center">请求超时</td><td align="center"></td></tr></tbody></table><table><thead><tr><th align="center">5xx</th><th align="center">服务端错误</th></tr></thead><tbody><tr><td align="center">500</td><td align="center">服务器内部错误</td></tr><tr><td align="center">501</td><td align="center">服务器不支持请求的功能</td></tr><tr><td align="center">504</td><td align="center">未能及时获取请求</td></tr></tbody></table><hr><h4 id="http与https"><a href="#http与https" class="headerlink" title="http与https"></a>http与https</h4><ul><li>http是明文传输，超文本传输协议。https加密传输 更安全</li><li>http应用层 https传输层</li><li>http标准端口80 https 443</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue</title>
      <link href="/2022/082624839.html"/>
      <url>/2022/082624839.html</url>
      
        <content type="html"><![CDATA[<h2 id="启动一个vue项目"><a href="#启动一个vue项目" class="headerlink" title="启动一个vue项目"></a>启动一个vue项目</h2><h3 id="vue2-0"><a href="#vue2-0" class="headerlink" title="vue2.0"></a>vue2.0</h3><p> D:\nodeJS\node_global\node_modules\vue 输入cmd<br> npm nodeJs已经安装好了 </p><pre class=" language-java"><code class="language-java">npm init vue<span class="token annotation punctuation">@latest</span><span class="token function">cd</span> <span class="token punctuation">(</span>项目名<span class="token punctuation">)</span> npm install npm run dev</code></pre><hr><h3 id="vue3-0"><a href="#vue3-0" class="headerlink" title="vue3.0"></a>vue3.0</h3><p>同上目录下面 </p><pre class=" language-java"><code class="language-java">vue create xsl666<span class="token function">cd</span> <span class="token punctuation">(</span>项目名<span class="token punctuation">)</span>  npm run serve</code></pre><hr><hr><h2 id="vue2-0-1"><a href="#vue2-0-1" class="headerlink" title="vue2.0"></a>vue2.0</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{name}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el <span class="token punctuation">:</span> <span class="token string">"#app"</span>         <span class="token comment" spellcheck="true">//挂载  </span>    data：<span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//必须有data(){return xx}      </span>        name<span class="token punctuation">:</span><span class="token string">'徐世龙'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><hr><blockquote><ul><li>.类 #id “div”标签选择器等都可以挂载 不可以挂body html 单标签</li><li>data里可以任意数据，对象数组都可以</li></ul></blockquote><h4 id="v-？"><a href="#v-？" class="headerlink" title="v-？"></a>v-？</h4><blockquote><p>v-text  修改textContent属性</p></blockquote><pre class=" language-html"><code class="language-html">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &lt;h2 v-text = "name"+"!">abc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      // abc被全部替换    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>名字是{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>               //推荐这样写  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    </code></pre><blockquote><p>v-html  设置innerHTML属性</p></blockquote><pre class=" language-html"><code class="language-html"> &lt;p v-html = "name"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>       //显示的是a标签的样式，如果是v-text直接显示原来的内容不会解析  data:{ name : "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>xxx.com<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>徐世龙<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>"}</code></pre><blockquote><p>v-on   为元素绑定事件 简写@<br>事件修饰符@keyup.enter  可传参</p></blockquote><pre class=" language-html"><code class="language-html">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xsl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>         //也可以input框设个button             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">     data<span class="token punctuation">:</span><span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'张烁'</span><span class="token punctuation">}</span>     methods<span class="token punctuation">:</span><span class="token punctuation">{</span> <span class="token function">xsl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'cnm'</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//方法内部可以通过this访问data的数据</span>     </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>                                   </code></pre><blockquote><p>v-show  根据真假让元素显示/隐藏 <code>display:none</code></p></blockquote><pre class=" language-html"><code class="language-html">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xsl<span class="token punctuation">></span>18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">     data<span class="token punctuation">:</span><span class="token punctuation">{</span>xsl<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span>     </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><blockquote><p>v-if    操作DOM树 不适合频繁操作的元素，性能消耗大</p></blockquote><blockquote><p>v-bind  绑定元素的属性 src class title等 省略为：</p></blockquote><pre class=" language-html"><code class="language-html">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xsl<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{a:isAc}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   //相当于三元表达式isAc？a : ""     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">     data<span class="token punctuation">:</span><span class="token punctuation">{</span>xsl<span class="token punctuation">:</span><span class="token string">'/abc.jpg'</span> <span class="token punctuation">,</span> isAc<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">}</span>     </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><blockquote><p>v-for   生成列表结构</p></blockquote><pre class=" language-html"><code class="language-html">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>&lt;li v-for = "(a,b) in arr">{{a}}{{b}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">     data<span class="token punctuation">:</span><span class="token punctuation">{</span>arr<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'xsl'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'^'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//a输出内容。b输出索引</span>     </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>不要和v-if联用 因为for优先级高 可以把v-if放在ul或者内部，要不报错。</p><blockquote><p>v-model  双向绑定表单元素的值</p></blockquote><pre class=" language-html"><code class="language-html">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xsl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">     data<span class="token punctuation">:</span><span class="token punctuation">{</span>xsl<span class="token punctuation">:</span><span class="token number">666</span><span class="token punctuation">}</span>                      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><hr><h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><h4 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get请求<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post请求<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;script src = "https://unpkg.com/axios/dist/axios.min.js"><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// axios.get().then(function(response){},function(err){})</span>    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".get"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"https://autumnfish.cn/api/joke/list?num=3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>        <span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".post"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"https://autumnfish.cn/api/user/reg"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>username<span class="token punctuation">:</span><span class="token string">"jack"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>         <span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token punctuation">)</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><blockquote><p>都是固定写法 背下来吧<br>axios的this指向改变的问题，先把this存起来(var a = this) 回调函数中使用a</p></blockquote><hr><h4 id="computed计算属性"><a href="#computed计算属性" class="headerlink" title="computed计算属性"></a>computed计算属性</h4><ul><li>与data methods同级</li><li>最大的特点是缓存，仅当computed内的函数 依赖的变量变化 才会再次运行该函数</li><li>本质上其实是get,v-model改变表单会报错</li></ul><hr><h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><pre class=" language-javascript"><code class="language-javascript">    watch<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token function">name</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token punctuation">,</span> old<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//监听属性</span>        obj<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">,</span>old<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//监听对象</span>        deep<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span></code></pre><hr><hr><h2 id="vue3-0-1"><a href="#vue3-0-1" class="headerlink" title="vue3.0"></a>vue3.0</h2><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><ul><li>Alpha     内测      </li><li>Beta      公开测试  (依然会新增功能，有很多bug)</li><li>Rc        候选版本 （主要修bug）</li><li>Release   正式版本</li></ul><hr><h3 id="vue3-0新特性"><a href="#vue3-0新特性" class="headerlink" title="vue3.0新特性"></a>vue3.0新特性</h3><ul><li>ES6 proxy代替ES5 Object.defineProxy 重新实现数据响应</li><li>源码用typescript重写</li><li>提供了composition API</li><li>自定义渲染器 （可以开发App 小程序 游戏开发 Web）</li><li>Fragment 模板可以有多个元素</li></ul><h4 id="数据响应式对比"><a href="#数据响应式对比" class="headerlink" title="数据响应式对比"></a>数据响应式对比</h4><p>vue2.0 </p><ul><li>无法动态监测到对象属性的添加删除</li><li>无法监测到数组下标和length属性变更<br>解释：vue2.0做一个数据劫持，一旦数据变化，更新DOM</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> data<span class="token punctuation">{</span>    age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>   Object<span class="token punctuation">.</span><span class="token function">defineProxy</span><span class="token punctuation">(</span>data <span class="token punctuation">,</span> k <span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> a <span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>          a <span class="token operator">=</span> value<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span></code></pre><p>想添加需要$set(对象，属性，值) $delete(对象，属性)  arr.push();<br>vue3.0不支持IE11；</p><h3 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h3><p>对标webpack<br>是一个web开发构建工具，仅支持vue3.0</p><pre class=" language-javascript"><code class="language-javascript">    npm init vite<span class="token operator">-</span>app xsl666    cd xsl666    npm install    npm run dev</code></pre><hr><h3 id="composition-API"><a href="#composition-API" class="headerlink" title="composition API"></a>composition API</h3><p>vue2.0是options API vue3.0保留了</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li>vue实例从创建到销毁的过程</li><li>共八个：创建前后，载入前后，更新前后，销毁前后 </li><li>进入页面 执行前四个 $data created就有 $el mounted有</li></ul><hr><h4 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h4><p>props和$emit<br>attr<br>expose/ref<br>v-model</p><h4 id="爷孙"><a href="#爷孙" class="headerlink" title="爷孙"></a>爷孙</h4><p>provide inject<br>两次父子组件</p><h4 id="任意"><a href="#任意" class="headerlink" title="任意"></a>任意</h4><p>Vuex</p><h4 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h4><p>不用的组件不会被销毁，保存在内存中，防止多次重新渲染DOM</p><h4 id="nextTick"><a href="#nextTick" class="headerlink" title="$nextTick"></a>$nextTick</h4><p>可以获取更新后的DOM </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>力扣Day1</title>
      <link href="/2022/08257096.html"/>
      <url>/2022/08257096.html</url>
      
        <content type="html"><![CDATA[<h3 id="HJ1两数之和"><a href="#HJ1两数之和" class="headerlink" title="HJ1两数之和"></a>HJ1两数之和</h3><ul><li>Arrays.sort(数组)                  实现排序</li><li>Arrays.binarySearch(arr,num)       实现二分查找</li><li>arr.length                         数组的长度，注意没有括号</li><li>Integer.MIN_VALUE                  $-2^31$</li><li>(int) a != a                       数值过大时long转int丢失精度</li><li>Integer.toString(int i)            数字转字符串</li></ul><hr><h3 id="HJ2-两数相加"><a href="#HJ2-两数相加" class="headerlink" title="HJ2 两数相加"></a>HJ2 两数相加</h3><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><p>可以有头指针，每个节点包含data和next;<br>各节点不一定连续存放（当前data的next指向很远的另一个地址）</p><h4 id="去你妈的这个类要自己手写"><a href="#去你妈的这个类要自己手写" class="headerlink" title="去你妈的这个类要自己手写"></a>去你妈的这个类要自己手写</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    ListNode next<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//链表指向的下一个值的指针</span>    <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>val <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//构造方法，用于初始化，没有这个就不能实例化，决定了实例化的格式(int x)</span><span class="token punctuation">}</span>                                  <span class="token comment" spellcheck="true">//只要调用了该类，那么val就被赋值为x;</span></code></pre><hr><p><strong>用的时候</strong></p><pre class=" language-java"><code class="language-java">ListNode xx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//实例化，无需定义长度。取决于上面的构造方法</span>xx<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//赋值，即</span>xx<span class="token punctuation">.</span>val                          <span class="token comment" spellcheck="true">//取第一个值</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>华为机试笔记Day4</title>
      <link href="/2022/082322351.html"/>
      <url>/2022/082322351.html</url>
      
        <content type="html"><![CDATA[<h3 id="哈希（散列）"><a href="#哈希（散列）" class="headerlink" title="哈希（散列）"></a>哈希（散列）</h3><h4 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h4><p>按照输入数据返回一个整数，这个整数必须是唯一的。<strong>不一定是索引</strong><br>实现数据和存储位置的一一对应。<br>例如 ：<br>对一个数据进行一些操作，返回一个数(存储位置)就行。可能会出现冲突。</p><hr><h4 id="设计散列函数"><a href="#设计散列函数" class="headerlink" title="设计散列函数"></a>设计散列函数</h4><h5 id="直接定址"><a href="#直接定址" class="headerlink" title="直接定址"></a>直接定址</h5><blockquote><p>哈希表中存放该数据出现了几次，映射到对应的人之类这样的。<br><strong>问题</strong> ： 如果数据是电话号码之类的不方便，下标太大了。</p></blockquote><hr><h5 id="平方取中"><a href="#平方取中" class="headerlink" title="平方取中"></a>平方取中</h5><blockquote><p>把输入数据平方，取中间的某几位数。<br><strong>问题</strong> ：可能会出现冲突</p></blockquote><hr><h5 id="取余"><a href="#取余" class="headerlink" title="取余"></a>取余</h5><p>顾名思义<br><strong>问题</strong> ： 同上</p><hr><h4 id="冲突排除"><a href="#冲突排除" class="headerlink" title="冲突排除"></a>冲突排除</h4><h5 id="开放地址"><a href="#开放地址" class="headerlink" title="开放地址"></a>开放地址</h5><blockquote><ul><li>线性探测 ：直接放后面那个</li><li>二次探测 ：放后面第1、4、9、16个</li><li>再哈希 ：使用多个散列函数</li></ul></blockquote><h5 id="链地址"><a href="#链地址" class="headerlink" title="链地址"></a>链地址</h5><blockquote><p>采用链表思想，不直接放在地址，放在指向这个地址的一个地方。<br>重复的话就接着向后链。</p></blockquote><hr><h4 id="HJ8-合并表记录"><a href="#HJ8-合并表记录" class="headerlink" title="HJ8 合并表记录"></a>HJ8 合并表记录</h4><h5 id="原思路"><a href="#原思路" class="headerlink" title="原思路"></a>原思路</h5><p>nextInt循环读取两个数组 冒泡排序两数组，整理为顺序；比较当前index与前面index<br>相同则value更新，否则输出前一个，循环结束输出最后一个。</p><h5 id="map函数常用语法"><a href="#map函数常用语法" class="headerlink" title="map函数常用语法"></a>map函数常用语法</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span>HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> A <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//固定写法,可以是String Bolean等</span>     A<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     A<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"qwe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     A<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">"李海波"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     A<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Integer i <span class="token operator">:</span> A<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//输出key以及查询的value;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key: "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" value: "</span> <span class="token operator">+</span> A<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span>String value<span class="token operator">:</span> A<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 输出每一个value</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h5 id="新解决思路"><a href="#新解决思路" class="headerlink" title="新解决思路"></a>新解决思路</h5><pre class=" language-java"><code class="language-java">      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tableSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">int</span> key <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> value <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> table<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span></code></pre><hr><h4 id="HJ9提取不重复的数"><a href="#HJ9提取不重复的数" class="headerlink" title="HJ9提取不重复的数"></a>HJ9提取不重复的数</h4><blockquote><p>思路和上一题差不多。主要是注意Put 不是 set ，然后value一般是自己定义往里填的<br>后来的会覆盖前面的，keySet values两个循环输出方法。</p></blockquote><pre class=" language-java"><code class="language-java">          <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//利用HashSet的不重复性！！！！！</span></code></pre><hr><h4 id="HJ10字符个数统计"><a href="#HJ10字符个数统计" class="headerlink" title="HJ10字符个数统计"></a>HJ10字符个数统计</h4><blockquote><p>妈的 记住br.read调用一次就会读取一次，不可以作为循环或判断条件。</p></blockquote><h5 id="HashSet类"><a href="#HashSet类" class="headerlink" title="HashSet类"></a>HashSet类</h5><pre class=" language-java"><code class="language-java">    <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引入 HashSet 类</span>    HashSet<span class="token operator">&lt;</span>String<span class="token operator">></span> A <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    A<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    A<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重复元素不添加；</span>    A<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"bcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>    A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    A<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String i <span class="token operator">:</span> A<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>                              <span class="token comment" spellcheck="true">//迭代输出</span></code></pre><h3 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h3><p><strong>常见的速查</strong></p><table><thead><tr><th align="center">字符</th><th align="center">ASCII码</th></tr></thead><tbody><tr><td align="center">空字符</td><td align="center">0</td></tr><tr><td align="center">换行</td><td align="center">10</td></tr><tr><td align="center">回车</td><td align="center">13</td></tr><tr><td align="center">空格</td><td align="center">32</td></tr><tr><td align="center">0-9</td><td align="center">48-57</td></tr><tr><td align="center">A-Z</td><td align="center">65-90</td></tr><tr><td align="center">a-z</td><td align="center">97-122</td></tr><tr><td align="center">其他</td><td align="center">其余到127</td></tr><tr><td align="center"><a href="https://xinzhi.wenda.so.com/a/1524302199615149">更多</a></td><td align="center"></td></tr></tbody></table><hr><h3 id="HJ11-数字颠倒"><a href="#HJ11-数字颠倒" class="headerlink" title="HJ11 数字颠倒"></a>HJ11 数字颠倒</h3><p>do-while循环</p><pre class=" language-java"><code class="language-java">   <span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">do</span><span class="token punctuation">{</span>    i<span class="token operator">++</span>   <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意while后面加分号，循环体在do后面。</span></code></pre><hr><h3 id="String类的方法"><a href="#String类的方法" class="headerlink" title="String类的方法"></a>String类的方法</h3><h4 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h4><blockquote><p>String(字符串)<br>他有很多方法，方法都是有括号的，需要先实例化String s = <strong>“abCD!&amp;?123”</strong><br>常见方法</p></blockquote><pre class=" language-java"><code class="language-java">String s <span class="token operator">=</span> <span class="token string">"abCD!&amp;?123"</span><span class="token number">1</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">//返回&amp; </span><span class="token number">2</span> s<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//返回8,因为比abc长8位，否则返回首位ASCII差,可IgnoreCase!</span><span class="token number">3</span> s<span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token string">"QWE"</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//拼接到后面 </span><span class="token number">4</span> s<span class="token punctuation">.</span><span class="token function">contentEquals</span><span class="token punctuation">(</span><span class="token string">"abC"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//返回true 括号里必须是Stringbuffer类</span><span class="token number">5</span> s<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//返回true </span><span class="token number">6</span> s<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">//返回哈希码(ASCII，</span><span class="token number">7</span> s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//第6个位置向后'1'的索引7，也可用ASCII值，还可"123"，还可lastIndexOf</span><span class="token number">8</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">//返回10 </span><span class="token number">9</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//a替换为A </span>                           <span class="token comment" spellcheck="true">//replaceAll(正则，"newstr") replaceFirst</span><span class="token number">10</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//返回的是String[]!!!!! 份数是limit 不够就不处理。</span><span class="token number">11</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//返回"bCD"</span><span class="token number">12</span> s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// 转小写，toUpperCase</span><span class="token number">13</span> s<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">'1'</span>，<span class="token string">'s'</span>，<span class="token string">'!'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回1s! 即任意类型转字符串表达形式</span><span class="token number">14</span> s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">//false</span></code></pre><p>附：<br>hashCode方法 $\sum\limits_{i=0}^{n-1}s[i]*31^i$</p><h4 id="equals-与-x3D-x3D"><a href="#equals-与-x3D-x3D" class="headerlink" title="equals 与 =="></a>equals 与 ==</h4><pre class=" language-java"><code class="language-java">String s1 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// String 直接创建</span>String s2 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// String 直接创建</span>String s3 <span class="token operator">=</span> s1<span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 相同引用</span>String s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// String 对象创建</span>String s5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// String 对象创建</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// true, s1 和 s2 都是直接创建</span>s2 <span class="token operator">==</span> s3<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// true </span>s1 <span class="token operator">==</span> s4<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// false, 不同引用地址</span>s4 <span class="token operator">==</span> s5<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// false, 堆中不同引用地址</span> s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true, 相同内容</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true, 相同内容</span>s4<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true, 相同内容</span></code></pre><p>equals也有IgnoreCase</p><hr><h4 id="HJ1-字符串最后一个单词的长度"><a href="#HJ1-字符串最后一个单词的长度" class="headerlink" title="HJ1 字符串最后一个单词的长度"></a>HJ1 字符串最后一个单词的长度</h4><pre class=" language-java"><code class="language-java">    String str <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> length <span class="token operator">=</span> s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//s[0]是hello </span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>主要学习的是String[]是个数组类型，划分后不是按char索引，而是按单词索引</p><hr><h4 id="HJ12-字符串倒转"><a href="#HJ12-字符串倒转" class="headerlink" title="HJ12 字符串倒转"></a>HJ12 字符串倒转</h4><p>侮辱智商。。。直接逆序循环解决了。</p><h4 id="HJ13-句子倒序输出"><a href="#HJ13-句子倒序输出" class="headerlink" title="HJ13 句子倒序输出"></a>HJ13 句子倒序输出</h4><p>也是侮辱智商的。。。</p><h3 id="明天预备学习的内容"><a href="#明天预备学习的内容" class="headerlink" title="明天预备学习的内容"></a>明天预备学习的内容</h3><ul><li>正则表达式</li><li>Arrays类</li><li>刷到HJ25</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>华为机试Day3</title>
      <link href="/2022/082136129.html"/>
      <url>/2022/082136129.html</url>
      
        <content type="html"><![CDATA[<h3 id="输入的另一种方式"><a href="#输入的另一种方式" class="headerlink" title="输入的另一种方式"></a>输入的另一种方式</h3><p><strong>利用IO流</strong> 一般牛客上面都给写好了</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// import java.io.BufferedReader;</span><span class="token comment" spellcheck="true">// import java.io.IOException;</span><span class="token comment" spellcheck="true">// import java.io.InputStreamReader;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//读取的总是字符串</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//字符串转数字</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>笔试遇到的问题合集</title>
      <link href="/2022/082029846.html"/>
      <url>/2022/082029846.html</url>
      
        <content type="html"><![CDATA[<h2 id="Thouthworks"><a href="#Thouthworks" class="headerlink" title="Thouthworks"></a>Thouthworks</h2><p>三道就做出来俩，虽然挺简单的但是考的List Integer类型我不会哈哈哈</p><h3 id="一、算法复杂度问题"><a href="#一、算法复杂度问题" class="headerlink" title="一、算法复杂度问题"></a>一、算法复杂度问题</h3><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><p>O($N!$) &gt; O($2^N$) &gt; O($N^2$) &gt; O($N*logN$) &gt; O($N$) &gt; O($logN$) &gt; O($1$)</p><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><h5 id="O-N"><a href="#O-N" class="headerlink" title="O($N$)"></a>O($N$)</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span>；i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>执行一次 i = 1 和 N 次 </p><ul><li>i&lt;n </li><li>i++</li><li>x++<br>共 <strong>3N+1</strong> 次<br><strong>N无限大时 O(3N+1)； 更接近O(N)</strong></li></ul><hr><h5 id="O-N-2"><a href="#O-N-2" class="headerlink" title="O($N^2$)"></a>O($N^2$)</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span>；i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span>；i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>共 <strong>$n^2+n$</strong> 次<br>O($N^2+N$) ==&gt; O($N^2$) </p><hr><h5 id="O-1"><a href="#O-1" class="headerlink" title="O(1)"></a>O(1)</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> z <span class="token operator">=</span> x<span class="token punctuation">;</span>x <span class="token operator">=</span> y<span class="token punctuation">;</span>y <span class="token operator">=</span> z<span class="token punctuation">;</span></code></pre><p>无论$x,y$怎么变化，复杂度都不变。</p><hr><h5 id="O-logN"><a href="#O-logN" class="headerlink" title="O($logN$)"></a>O($logN$)</h5><pre class=" language-java"><code class="language-java"> <span class="token keyword">int</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    i <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>循环$k = \log_2 N$次 停止循环。</p><hr><h5 id="O-n-logN"><a href="#O-n-logN" class="headerlink" title="O($n*logN$)"></a>O($n*logN$)</h5><p>嵌套 $n 与 logN$ 即可</p><h3 id="二、转化为ArrayList解决问题"><a href="#二、转化为ArrayList解决问题" class="headerlink" title="二、转化为ArrayList解决问题"></a>二、转化为ArrayList解决问题</h3><h4 id="导包和固定写法"><a href="#导包和固定写法" class="headerlink" title="导包和固定写法"></a>导包和固定写法</h4><pre class=" language-java"><code class="language-java">        <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>         ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> num <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　      <span class="token comment" spellcheck="true">// 可以是 Integer String Float等等，即引用数据类型</span></code></pre><hr><h4 id="定义各种数据类型"><a href="#定义各种数据类型" class="headerlink" title="定义各种数据类型"></a>定义各种数据类型</h4><p>__String__其实就是每个元素都是字符串类型的数组</p><pre class=" language-java"><code class="language-java">          ————基本数据类型————      <span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">)</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//定义并初始化</span>      <span class="token keyword">boolean</span> b<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//定义不初始化，默认值是0,null,false之类</span>      Integer a<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// </span>      <span class="token keyword">final</span> <span class="token keyword">float</span> PI <span class="token operator">=</span> <span class="token number">3.14</span>；<span class="token comment" spellcheck="true">//常量</span>      <span class="token comment" spellcheck="true">//int 0 开头表示八进制 0x开头表示十六进制</span>      <span class="token comment" spellcheck="true">// char'' String"" 也是这么定义的</span>          ————引用数据类型————        <span class="token comment" spellcheck="true">//类、接口、数组</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span>  arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//也可以int char Integer boolean都可以</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span>  arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"!"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>             ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>可不写<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意这个带括号</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//main函数，主要在这里面写东西</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方法，必须带()</span><span class="token punctuation">}</span></code></pre><h4 id="String-String-Int-和-ArrayList转换"><a href="#String-String-Int-和-ArrayList转换" class="headerlink" title="String[] String Int 和 ArrayList转换"></a>String[] String Int 和 ArrayList转换</h4><p>list 可以打印出来 [ a , 4 , ! ]<br>String 可打印为 a , 4 , !<br>String[] 可打印出 arr[ 索引 ]</p><pre class=" language-java"><code class="language-java">     <span class="token comment" spellcheck="true">//String[] 转 ArrayList   arr1==>list 主要就是Array自带的aslist</span>     String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> String <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//ArrayList 转 String[]   list==>arr和arr1</span>     String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//arr1用于接收arr，且完全覆盖，比arr长出来的部分是null</span>     <span class="token comment" spellcheck="true">//String 转 ArrayList 实际上是先转化为String[]</span>     ArrayList list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>‘<span class="token punctuation">,</span>’<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//ArrayList 转 String     join方法表示拼接</span>     String str<span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//Arraylist转 int[]</span>     <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>valueOf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//int[]转list </span>     List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list1 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h4 id="ArrayList常用方法"><a href="#ArrayList常用方法" class="headerlink" title="ArrayList常用方法"></a>ArrayList常用方法</h4><pre class=" language-java"><code class="language-java">      ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> num <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　         num<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//拼接另一个ArrayList用num.addAll(num2)</span>        num<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//按照索引删除，不会删除元素2</span>        num<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        num<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> A <span class="token operator">:</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h3 id="三、牛客华为机试"><a href="#三、牛客华为机试" class="headerlink" title="三、牛客华为机试"></a>三、牛客华为机试</h3><h4 id="HJ6-质数因子"><a href="#HJ6-质数因子" class="headerlink" title="HJ6 质数因子"></a>HJ6 质数因子</h4><p><strong>最多只有一个质数因子大于本身的平方根</strong><br>递归</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">long</span> num<span class="token punctuation">;</span>    <span class="token keyword">long</span> k <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            num <span class="token operator">/=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">""</span><span class="token operator">:</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="HJ7-取近似值"><a href="#HJ7-取近似值" class="headerlink" title="HJ7 取近似值"></a>HJ7 取近似值</h4><p>这题很像今天的科大讯飞笔试题<br>学了一个很巧妙的解法</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">float</span> number<span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="不做了今天太累了，睡觉了先！"><a href="#不做了今天太累了，睡觉了先！" class="headerlink" title="不做了今天太累了，睡觉了先！"></a>不做了今天太累了，睡觉了先！</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>牛客-华为机试笔记</title>
      <link href="/2022/081847630.html"/>
      <url>/2022/081847630.html</url>
      
        <content type="html"><![CDATA[<h2 id="HJ5-进制转换"><a href="#HJ5-进制转换" class="headerlink" title="HJ5 进制转换"></a>HJ5 进制转换</h2><h4 id="固定写法"><a href="#固定写法" class="headerlink" title="固定写法"></a>固定写法</h4><pre class=" language-java"><code class="language-java">     <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner     Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>     String str <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>nextLine 读取到的是换行符</li><li>next  读取到的是空格或换行符</li><li>hasNext 判断是否有非空字符</li><li>hasNextLine 判断是否有下一行</li></ul><h4 id="十六进制转十进制"><a href="#十六进制转十进制" class="headerlink" title="十六进制转十进制"></a>十六进制转十进制</h4><h5 id="从右到左-第i位数字（A–F对应10–15）乘以-16-i-求和即为所得。"><a href="#从右到左-第i位数字（A–F对应10–15）乘以-16-i-求和即为所得。" class="headerlink" title="从右到左 第i位数字（A–F对应10–15）乘以$16^i$  求和即为所得。"></a>从右到左 第i位数字（A–F对应10–15）乘以$16^i$  求和即为所得。</h5><p>例如25A=10×$16^0$+5×$16^1$+2×$16^2$<br>即25A(16) = 602 (10)</p><p>点击<a href="https://tool.oschina.net/hexconvert/">这里</a>验证结果是否正确。</p><hr><h5 id="java偷懒法"><a href="#java偷懒法" class="headerlink" title="java偷懒法"></a>java偷懒法</h5><pre class=" language-java"><code class="language-java">     <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0x16</span>；     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//输出20；</span></code></pre><h4 id="字符串倒转"><a href="#字符串倒转" class="headerlink" title="字符串倒转"></a>字符串倒转</h4><pre class=" language-java"><code class="language-java">     String str <span class="token operator">=</span> <span class="token string">"Abc123"</span>     StringBuffer str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     str <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>需要注意StringBuffer类需要通过toString方法才可以变回原来的字符串</p><h4 id="获取第i个字符并转数字"><a href="#获取第i个字符并转数字" class="headerlink" title="获取第i个字符并转数字"></a>获取第i个字符并转数字</h4><pre class=" language-java"><code class="language-java">          <span class="token keyword">char</span> a <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//   注意这里类型为char了 如果要赋值需要单引号</span>          <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> a <span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> c <span class="token operator">=</span> a<span class="token operator">-</span><span class="token number">48</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//   48 是 0 的ASCII码</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>重新搭建的博客</title>
      <link href="/2022/0817undefined.html"/>
      <url>/2022/0817undefined.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/0817undefined.html"/>
      <url>/2022/0817undefined.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
